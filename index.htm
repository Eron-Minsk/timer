<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Invigilation Timer</title>
    <link rel="stylesheet" href="style.css">
    <style>
        :root {
    --primary-color: #6C3D91;    /* Purple */
    --accent-color: #00889C;     /* Teal */
    --neutral-color: #78848E;    /* Grey */
    --warning-color: #FF4C4C;
    --success-color: #45B39D;
    --background-color: #2C2C2C;
    --card-color: #373737;
}

html {
    font-size: 16px;
    box-sizing: border-box;
}

*, *::before, *::after {
    box-sizing: inherit;
}

body {
    font-family: 'Courier New', monospace;
    background-color: var(--background-color);
    color: var(--accent-color);
    margin: 0;
    padding: 2vw;
    min-height: 100vh;
    position: relative;
    padding-bottom: 100px;
}

#venue-container {
    text-align: center;
    margin-bottom: 2vw;
}
#venue-display {
    font-size: clamp(1.7rem, 5vw, 3.2rem);
    font-weight: bold;
    color: var(--primary-color);
    text-transform: uppercase;
    letter-spacing: 0.12em;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
}

#setup-container {
    background: var(--card-color);
    border: 0.2em solid var(--primary-color);
    padding: 2vw;
    border-radius: 0.5em;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 2vw;
    animation: fadeIn 0.5s;
}

#timers-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(320px, 90vw), 1fr));
    gap: 2vw;
    margin-top: 2vw;
    margin-bottom: 8vw;
    overflow-x: auto;
}

.timer {
    background: var(--card-color);
    border: 0.25em solid var(--primary-color);
    border-radius: 0.2em;
    box-shadow: 0 0 1.2em rgba(184, 115, 51, 0.3);
    position: relative;
    overflow: hidden;
    min-height: clamp(140px, 24vw, 240px);
    display: flex;
    flex-direction: column;
    justify-content: center;
    animation: fadeIn 0.3s;
}

.timer h2 {
    color: var(--primary-color);
    font-family: 'Georgia', serif;
    text-transform: uppercase;
    letter-spacing: 0.09em;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    font-size: clamp(1.3rem, 4vw, 2.6rem);
    margin-bottom: 1vw;
    text-align: center;
}

.time-display {
    font-size: clamp(1.8rem, 7vw, 4rem);
    font-family: 'Courier New', monospace;
    color: var(--accent-color);
    text-shadow: 0 0 0.8em var(--primary-color);
    background: linear-gradient(45deg, var(--background-color), var(--card-color));
    padding: clamp(0.5rem, 2vw, 1.5rem);
    border: 0.12em solid var(--primary-color);
    text-align: center;
    margin: 1vw 0;
    transition: all 0.3s;
}

.warning .time-display {
    color: var(--warning-color);
    text-shadow: 0 0 1.2em var(--warning-color);
    animation: pulse 1s infinite;
}

@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
}

.progress-bar {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 0.8em;
    background: linear-gradient(to right, var(--primary-color), var(--accent-color));
    border-top: 2px solid #704214;
    transition: width 1s linear;
}

button {
    background-color: var(--accent-color);
    border: 0.12em solid var(--primary-color);
    color: #fff;
    text-transform: uppercase;
    letter-spacing: 0.06em;
    position: relative;
    transition: all 0.3s;
    padding: 0.5em 1.5em;
    border-radius: 0.3em;
    cursor: pointer;
    margin: 0.3em;
    font-size: clamp(0.9rem, 2vw, 1.2rem);
}

button:hover {
    background-color: var(--neutral-color);
    transform: translateY(-2px);
    box-shadow: 0 0.3em 1em rgba(0,0,0,0.25), 0 0 1em var(--primary-color);
    text-shadow: 0 0 0.18em #FFF;
}

/* Remove-timer button */
.remove-timer {
    position: absolute;
    top: 0.6em;
    right: 0.6em;
    padding: 0.35em 0.8em;
    font-size: 1.5em;
    border-radius: 50%;
    min-width: 2.4em;
    height: 2.4em;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #6C3D91;
    border: 0.12em solid #8B4DB8;
    color: #D4AF37;
    transition: all 0.3s;
}
.remove-timer:hover {
    background-color: var(--warning-color);
    box-shadow: 0 0 0.8em var(--primary-color);
    border-color: var(--warning-color);
    color: #fff;
}

.warning {
    color: var(--warning-color);
}
.finished {
    background-color: var(--warning-color) !important;
    border-color: #da190b !important;
    opacity: 1;
}
.finished .time-display {
    color: white;
    text-shadow: 0 0 0.6em rgba(0, 0, 0, 0.5);
}
.finished .progress-bar {
    background: #da190b;
}

.notification {
    position: fixed;
    top: 2vw;
    right: 2vw;
    padding: 1vw 1.5vw;
    background-color: var(--warning-color);
    color: white;
    border-radius: 0.38em;
    box-shadow: 0 0.3em 1em rgba(0, 0, 0, 0.1);
    z-index: 1000;
    animation: fadeIn 0.3s;
}

#start-all-container {
    position: fixed;
    bottom: 1.5vw;
    left: 0;
    right: 0;
    text-align: center;
    background-color: rgba(255, 255, 255, 0.93);
    padding: 1vw 0.3vw;
    box-shadow: 0 -0.2em 0.8em rgba(0,0,0,0.08);
    z-index: 1000;
}

#start-all, #pause-all, #reset-all {
    background: var(--accent-color);
    border: 0.2em solid var(--primary-color);
    font-family: 'Georgia', serif;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    position: relative;
    overflow: hidden;
    font-size: clamp(1.1rem, 2.8vw, 1.4rem);
    padding: 0.65em 2em;
    border-radius: 0.4em;
    box-shadow: 0 0.2em 0.5em rgba(0,0,0,0.07);
    transition: transform 0.2s;
    font-weight: bold;
    margin: 0.2em;
}

#pause-all.active {
    background-color: var(--warning-color);
}

.timer-controls {
    display: flex;
    justify-content: center;
    gap: 0.5em;
    margin: 0.5em 0;
    flex-wrap: wrap;
}

.timer-btn {
    background: var(--accent-color);
    border: 0.12em solid var(--primary-color);
    padding: 0.5em 1em;
    font-size: clamp(0.95rem, 1.4vw, 1.15rem);
    min-width: 4em;
    transition: all 0.3s;
}

.timer-btn.paused {
    background-color: var(--warning-color);
}

.timer.paused .time-display {
    opacity: 0.7;
}

.add-time-btn {
    background-color: var(--success-color);
    min-width: 3em;
    padding: 0.5em 0.9em;
    font-size: clamp(0.9rem, 1.2vw, 1.05rem);
}
.add-time-btn:hover {
    background-color: #2E8B57;
    box-shadow: 0 0 1em var(--success-color);
}

#reload-btn, #help-btn, #accessibility-btn, #fullscreen-btn, #light-mode-btn {
    position: fixed;
    top: 1.2vw;
    width: 2.8em;
    height: 2.8em;
    border-radius: 50%;
    font-size: 1.4em;
    background-color: var(--primary-color);
    color: #D4AF37;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    border: 0.12em solid var(--primary-color);
    font-weight: bold;
    transition: all 0.3s;
    padding: 0;
}
#reload-btn { left: 1vw; }
#help-btn { left: 5vw; }
#accessibility-btn { left: 9vw; }
#fullscreen-btn { left: 13vw; }
#light-mode-btn { left: 17vw; }

#help-btn:hover,
#accessibility-btn:hover,
#fullscreen-btn:hover,
#light-mode-btn:hover,
#reload-btn:hover {
    background-color: var(--neutral-color);
    transform: scale(1.1);
    box-shadow: 0 0 1.2em var(--primary-color);
}

#date-time-display {
    position: fixed;
    top: 1.2vw;
    right: 1vw;
    font-size: clamp(1.1rem, 2.6vw, 1.5rem);
    font-family: 'Courier New', monospace;
    color: var(--accent-color);
    background-color: var(--card-color);
    padding: 0.9em 1.3em;
    border: 0.12em solid var(--primary-color);
    border-radius: 0.4em;
    box-shadow: 0 0.2em 0.6em rgba(0, 0, 0, 0.12);
    z-index: 1000;
    text-align: center;
}

#undo-button {
    position: fixed;
    bottom: 7vw;
    right: 1.7vw;
    background-color: var(--accent-color);
    color: white;
    padding: 0.7em 1.2em;
    border-radius: 0.3em;
    border: 0.12em solid var(--primary-color);
    cursor: pointer;
    display: none;
    animation: slideIn 0.3s;
    z-index: 1000;
    font-family: 'Courier New', monospace;
    font-size: clamp(1rem, 1.8vw, 1.2rem);
}
#undo-button:hover {
    background-color: var(--neutral-color);
    transform: translateY(-2px);
    box-shadow: 0 0.3em 1em rgba(0,0,0,0.3);
}

#timer-counter {
    position: fixed;
    bottom: 1.5vw;
    right: 1vw;
    background-color: var(--card-color);
    border: 0.12em solid var(--primary-color);
    color: var(--accent-color);
    padding: 0.5em 1em;
    border-radius: 0.5em;
    font-family: 'Courier New', monospace;
    font-size: clamp(0.8rem, 1.5vw, 1.1rem);
    z-index: 1000;
    box-shadow: 0 0.12em 0.25em rgba(0, 0, 0, 0.18);
}

/* Screws on timer cards */
.screw {
    position: absolute;
    width: 1.5em;
    height: 1.5em;
    background-color: #6C3D91;
    border: 0.2em solid #8B4DB8;
    border-radius: 50%;
    box-shadow: inset 0 0.2em 0.5em rgba(0, 0, 0, 0.5), 0 0.2em 0.5em rgba(0, 0, 0, 0.3);
    z-index: 10;
}
.screw::before, .screw::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0.7em;
    height: 0.19em;
    background-color: #D4AF37;
    box-shadow: 0 0 0.12em rgba(0, 0, 0, 0.5);
}
.screw::before { transform: translate(-50%, -50%) rotate(45deg);}
.screw::after { transform: translate(-50%, -50%) rotate(-45deg);}
.screw.top-left { top: 0.3em; left: 0.3em; }
.screw.top-right { top: 0.3em; right: 0.3em; }
.screw.bottom-left { bottom: 0.3em; left: 0.3em; }
.screw.bottom-right { bottom: 0.3em; right: 0.3em; }

.preset-buttons {
    display: flex;
    gap: 0.6em;
    margin: 0.7em 0;
    flex-wrap: wrap;
    justify-content: center;
}
.preset-btn {
    background-color: var(--accent-color);
    min-width: 3.5em;
    padding: 0.5em 0.9em;
    font-size: 1em;
    border: 0.12em solid var(--primary-color);
    color: #D4AF37;
    border-radius: 0.2em;
}
.preset-btn:hover {
    background-color: var(--neutral-color);
    transform: translateY(-2px);
    box-shadow: 0 0 0.8em var(--primary-color);
}
.preset-btn.active {
    background-color: var(--primary-color);
    box-shadow: 0 0 0.8em var(--primary-color);
    animation: fadeIn 0.2s;
}

#help-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    animation: fadeIn 0.3s;
}
#help-popup {
    background: var(--card-color);
    border: 0.25em solid var(--primary-color);
    border-radius: 0.5em;
    padding: 3vw;
    max-width: 900px;
    width: 95vw;
    max-height: 85vh;
    position: relative;
    overflow-y: auto;
    box-shadow: 0 0 1.8em rgba(184, 115, 51, 0.3);
    animation: fadeIn 0.4s;
}
.help-content {
    color: #D4AF37;
    font-family: 'Courier New', monospace;
}

.help-content h2 {
    color: #D4AF37;
    text-align: center;
    margin-bottom: 2vw;
    font-family: 'Georgia', serif;
    text-transform: uppercase;
    letter-spacing: 0.12em;
}
.help-content section {
    margin-bottom: 1.2vw;
    padding: 1vw;
    border: 0.12em solid var(--primary-color);
    background: rgba(0, 0, 0, 0.2);
}
.help-content h3 {
    color: var(--primary-color);
    margin-bottom: 0.5em;
}
.help-content ul, .help-content ol {
    padding-left: 1.5em;
    line-height: 1.6;
}

.close-help {
    position: absolute;
    top: 0.8em;
    right: 0.8em;
    width: 2em;
    height: 2em;
    border-radius: 50%;
    background-color: var(--warning-color);
    border: none;
    color: white;
    font-size: 1.2em;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1;
}

.hidden {
    display: none !important;
}

/* High Contrast Theme */
body.high-contrast {
    --primary-color: #5928ed;
    --accent-color: #00b4c5;
    --neutral-color: #00bf7d;
    --background-color: #000000;
    --card-color: #000000;
    --highlight-color: #0073e6;
    --emphasis-color: #2546f0;
}
body.high-contrast .timer { border-color: var(--primary-color);}
body.high-contrast .time-display {
    color: var(--accent-color);
    background: #000;
    border-color: var(--primary-color);
    text-shadow: none;
}
body.high-contrast button {
    background-color: var(--neutral-color);
    border-color: var(--primary-color);
    color: #000;
}
body.high-contrast button:hover {
    background-color: var(--highlight-color);
    border-color: var(--emphasis-color);
}
body.high-contrast input {
    background-color: #000;
    border-color: var(--accent-color);
    color: var(--accent-color);
}
body.high-contrast .progress-bar {
    background: linear-gradient(to right, var(--neutral-color), var(--accent-color));
}
body.high-contrast .warning { color: var(--emphasis-color);}
body.high-contrast #accessibility-btn {
    background-color: var(--neutral-color);
    border-color: var(--primary-color);
    color: #000;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px);}
    to { opacity: 1; transform: translateY(0);}
}
@keyframes fadeOut {
    from { opacity: 1; transform: translateY(0);}
    to { opacity: 0; transform: translateY(20px);}
}
@keyframes slideIn {
    from { transform: translateX(100%);}
    to { transform: translateX(0);}
}

/* Responsive tweaks */
@media (max-width: 900px) {
    #timers-container {
        grid-template-columns: repeat(auto-fit, minmax(min(260px, 94vw), 1fr));
        gap: 3vw;
    }
    .timer {
        min-height: clamp(120px, 28vw, 180px);
    }
}

@media (max-width: 600px) {
    body { padding: 0.5vw; }
    #venue-container { margin-bottom: 3vw; }
    #setup-container { padding: 2vw 1vw; }
    #timers-container { gap: 1vw; }
    .timer { min-width: 92vw; min-height: 100px; }
    .time-display { font-size: clamp(1.1rem, 10vw, 2.5rem); }
    #start-all, #pause-all, #reset-all { font-size: clamp(1rem, 4vw, 1.2rem);}
    #date-time-display { font-size: 1rem; padding: 0.5em 0.7em;}
    #undo-button { padding: 0.4em 0.6em;}
    #timer-counter { font-size: 0.8rem;}
}
  </style>
</head>
<body>
    <button id="reload-btn" onclick="location.reload()" aria-label="Reload Page">↻</button>
    <button id="help-btn" onclick="showHelp()" aria-label="Show Help">?</button>
    <button id="accessibility-btn" aria-label="Toggle High Contrast Mode" onclick="toggleHighContrast()">
        <span aria-hidden="true">♿</span>
    </button>
    <!-- Light Mode Button -->
    <button id="light-mode-btn" aria-label="Toggle Light Mode" onclick="toggleLightMode()">
        <span aria-hidden="true">☀️</span>
    </button>
    <div id="aria-live" aria-live="polite" style="position:absolute;left:-9999px;top:auto;width:1px;height:1px;overflow:hidden;"></div>
    <div id="venue-container">
        <input type="text" id="venue-input" placeholder="Enter Venue">
        <button onclick="setVenue()" aria-label="Set Venue">Set Venue</button>
        <div id="venue-display"></div>
    </div>

    <div id="setup-container">
        <input type="text" id="module-code" placeholder="Module Code">
        <input type="number" id="hours" placeholder="Hours" min="0">
        <input type="number" id="minutes" placeholder="Minutes" min="0">
        <div class="preset-buttons">
            <button onclick="usePreset(60)" class="preset-btn">1h</button>
            <button onclick="usePreset(90)" class="preset-btn">1.5h</button>
            <button onclick="usePreset(120)" class="preset-btn">2h</button>
            <button onclick="usePreset(150)" class="preset-btn">2.5h</button>
            <button onclick="usePreset(180)" class="preset-btn">3h</button>
        </div>
        <button onclick="addTimer()" aria-label="Add Timer">Add Timer</button>
        <div class="config-controls">
            <button onclick="saveTimers()" aria-label="Save Configuration">Save Configuration</button>
            <button onclick="loadTimers()" aria-label="Load Configuration">Load Configuration</button>
        </div>
    </div>

    <div id="timers-container"></div>

    <div id="timer-counter">Active Timers: 0</div>

    <div id="start-all-container">
        <button onclick="startAllTimers()" id="start-all" aria-label="Start All Timers">START ALL TIMERS</button>
        <button onclick="pauseAllTimers()" id="pause-all" aria-label="Pause or Resume All Timers">PAUSE ALL</button>
        <button onclick="resetAllTimers()" id="reset-all" aria-label="Reset All Timers">RESET ALL</button>
        <button onclick="addTimeToAll(60)" class="add-time-btn" aria-label="Add 1 Minute to All Timers">+1m ALL</button>
        <button onclick="addTimeToAll(300)" class="add-time-btn" aria-label="Add 5 Minutes to All Timers">+5m ALL</button>
    </div>

    <button id="fullscreen-btn" onclick="toggleFullscreen()" aria-label="Toggle Fullscreen">
        <span aria-hidden="true">⛶</span>
    </button>

    <div id="date-time-display"></div>

    <button id="undo-button" onclick="undoRemove()" style="display: none;" aria-label="Undo Remove">
        ↩ Undo Remove
    </button>

    <audio id="timer-complete-sound" src="elapsed.mp3" preload="auto"></audio>

    <div id="help-overlay" class="hidden">
        <div id="help-popup">
            <div class="screw top-left"></div>
            <div class="screw top-right"></div>
            <div class="screw bottom-left"></div>
            <div class="screw bottom-right"></div>
            <button class="close-help" onclick="hideHelp()">×</button>
            <h2>Invigilation Timer - Help Guide</h2>
            <div class="help-content">
                <section>
                    <h3>Getting Started</h3>
                    <ol>
                        <li>Enter the venue name and click "Set Venue"</li>
                        <li>Add timers by entering module code and duration</li>
                        <li>Use preset durations for quick setup</li>
                        <li>Click "START ALL TIMERS" to begin</li>
                    </ol>
                </section>
                <section>
                    <h3>Timer Controls</h3>
                    <ul>
                        <li><strong>Pause/Resume:</strong> Toggle individual timers</li>
                        <li><strong>Reset:</strong> Return timer to original duration</li>
                        <li><strong>+1m/+5m:</strong> Add extra time</li>
                        <li><strong>×:</strong> Remove timer</li>
                    </ul>
                </section>
                <section>
    <script>
        let timers = [];
        let isRunning = false;
        let lastRemovedTimer = null;
        let audioEnabled = false;

        function enableAudioPlayback() {
            if (!audioEnabled) {
                const audio = document.getElementById('timer-complete-sound');
                // Try to unlock audio context without playing the alarm
                audio.muted = true;
                audio.play().catch(() => {});
                audio.pause();
                audio.currentTime = 0;
                audio.muted = false;
                audioEnabled = true;
                document.removeEventListener('click', enableAudioPlayback);
            }
        }

        function setVenue() {
            const venue = document.getElementById('venue-input').value.toUpperCase();
            document.getElementById('venue-display').textContent = venue;
        }

        function validateInput(moduleCode, hours, minutes) {
            if (!moduleCode || moduleCode.trim() === '') {
                alert('Please enter a valid module code');
                return false;
            }

            if (isNaN(hours) || isNaN(minutes)) {
                alert('Hours and minutes must be valid numbers');
                return false;
            }

            if (hours < 0 || minutes < 0) {
                alert('Time values cannot be negative');
                return false;
            }

            if (minutes >= 60) {
                alert('Minutes must be less than 60');
                return false;
            }

            if (hours === 0 && minutes === 0) {
                alert('Please enter a valid time');
                return false;
            }

            if (hours > 24) {
                alert('Maximum time limit is 24 hours');
                return false;
            }

            return true;
        }

        function updateTimerCounter() {
            const activeTimers = timers.filter(t => !t.isPaused && t.remainingTime > 0).length;
            const totalTimers = timers.length;
            document.getElementById('timer-counter').textContent = 
                `Active: ${activeTimers}/${totalTimers}`;
        }

        function addTimer() {
            const moduleCode = document.getElementById('module-code').value.trim().toUpperCase(); // Convert to uppercase
            const hours = parseInt(document.getElementById('hours').value) || 0;
            const minutes = parseInt(document.getElementById('minutes').value) || 0;

            if (!validateInput(moduleCode, hours, minutes)) {
                return;
            }

            const totalSeconds = (hours * 3600) + (minutes * 60);
            const timerId = Date.now();

            // Case-insensitive check for duplicate module codes
            if (timers.some(timer => timer.moduleCode.toUpperCase() === moduleCode)) {
                alert('A timer for this module code already exists');
                return;
            }

            // Limit maximum number of timers
            if (timers.length >= 10) {
                alert('Maximum number of timers (10) reached');
                return;
            }

            // Create timer UI and add to array
            try {
                const timerDiv = document.createElement('div');
                timerDiv.className = 'timer';
                timerDiv.style.opacity = '0'; // Start invisible
                timerDiv.id = `timer-${timerId}`;
                timerDiv.setAttribute('tabindex', '0');
                timerDiv.setAttribute('aria-label', `Timer for ${moduleCode}`);
                timerDiv.innerHTML = `
                    <div class="screw top-left"></div>
                    <div class="screw top-right"></div>
                    <div class="screw bottom-left"></div>
                    <div class="screw bottom-right"></div>
                    <h2>${moduleCode}</h2>
                    <div class="time-display">
                        ${formatTime(totalSeconds)}
                    </div>
                    <div class="timer-controls">
                        <button class="timer-btn pause-btn" onclick="pauseTimer(${timerId})">
                            <span class="btn-text">Pause</span>
                        </button>
                        <button class="timer-btn reset-btn" onclick="resetTimer(${timerId})">
                            <span class="btn-text">Reset</span>
                        </button>
                        <button class="timer-btn add-time-btn" onclick="addExtraTime(${timerId}, 60)">
                            +1m
                        </button>
                        <button class="timer-btn add-time-btn" onclick="addExtraTime(${timerId}, 300)">
                            +5m
                        </button>
                    </div>
                    <div class="progress-bar" style="width: 100%"></div>
                    <button class="remove-timer" onclick="removeTimer(${timerId})">×</button>
                `;

                document.getElementById('timers-container').appendChild(timerDiv);
                
                // Force a reflow to ensure the animation plays
                timerDiv.offsetHeight;
                timerDiv.style.opacity = ''; // Remove inline opacity to let CSS animation take over

                timers.push({
                    id: timerId,
                    moduleCode: moduleCode,
                    remainingTime: totalSeconds,
                    originalTime: totalSeconds
                });

                // Clear input fields
                document.getElementById('module-code').value = '';
                document.getElementById('hours').value = '';
                document.getElementById('minutes').value = '';

                // Update active timer count
                updateTimerCounter();
            } catch (error) {
                console.error('Error creating timer:', error);
                alert('An error occurred while creating the timer');
            }
        }

        function startAllTimers() {
            if (isRunning) {
                alert('Timers are already running');
                return;
            }

            if (timers.length === 0) {
                alert('Please add at least one timer before starting');
                return;
            }

            try {
                isRunning = true;
                timers.forEach(timer => {
                    if (!timer.isPaused && timer.remainingTime > 0 && !timer.intervalId) {
                        timer.intervalId = setInterval(() => {
                            updateTimer(timer);
                        }, 1000);
                    }
                });

                document.getElementById('start-all').disabled = true;
                document.getElementById('setup-container').style.display = 'none';
            } catch (error) {
                console.error('Error starting timers:', error);
                alert('An error occurred while starting the timers');
                isRunning = false;
            }
        }

        function updateTimer(timer) {
            if (timer.isPaused || timer.remainingTime <= 0) {
                if (timer.intervalId) {
                    clearInterval(timer.intervalId);
                    timer.intervalId = null;
                }
                return;
            }

            timer.remainingTime--;
            const timerElement = document.getElementById(`timer-${timer.id}`);
            const timeDisplay = timerElement.querySelector('.time-display');
            const progressBar = timerElement.querySelector('.progress-bar');
            
            timeDisplay.textContent = formatTime(timer.remainingTime);
            
            // Update progress bar
            const progressPercent = (timer.remainingTime / timer.originalTime) * 100;
            progressBar.style.width = `${progressPercent}%`;

            if (timer.remainingTime <= 300) {
                timeDisplay.classList.add('warning');
                progressBar.style.backgroundColor = 'var(--warning-color)';
            }

            // Check if timer has completed
            if (timer.remainingTime === 0) {
                notifyTimerComplete(timer.id);
                updateTimerCounter();
                if (timer.intervalId) {
                    clearInterval(timer.intervalId);
                    timer.intervalId = null;
                }
            }
        }

        function pauseTimer(timerId) {
            const timer = timers.find(t => t.id === timerId);
            if (!timer) return;

            const timerElement = document.getElementById(`timer-${timerId}`);
            const pauseBtn = timerElement.querySelector('.pause-btn');
            
            if (timer.isPaused) {
                // Resume timer
                timer.isPaused = false;
                timerElement.classList.remove('paused');
                pauseBtn.innerHTML = '<span class="btn-text">Pause</span>';
                pauseBtn.classList.remove('paused');
                if (isRunning && timer.remainingTime > 0 && !timer.intervalId) {
                    timer.intervalId = setInterval(() => {
                        updateTimer(timer);
                    }, 1000);
                }
            } else {
                // Pause timer
                timer.isPaused = true;
                timerElement.classList.add('paused');
                pauseBtn.innerHTML = '<span class="btn-text">Resume</span>';
                pauseBtn.classList.add('paused');
                if (timer.intervalId) {
                    clearInterval(timer.intervalId);
                    timer.intervalId = null;
                }
            }
            updateTimerCounter();
        }

        function resetTimer(timerId) {
            const timer = timers.find(t => t.id === timerId);
            if (!timer) return;

            timer.remainingTime = timer.originalTime;
            timer.isPaused = false;

            const timerElement = document.getElementById(`timer-${timerId}`);
            const timeDisplay = timerElement.querySelector('.time-display');
            const progressBar = timerElement.querySelector('.progress-bar');
            const pauseBtn = timerElement.querySelector('.pause-btn');

            timeDisplay.textContent = formatTime(timer.remainingTime);
            progressBar.style.width = '100%';
            timerElement.classList.remove('paused', 'warning', 'finished');
            pauseBtn.innerHTML = '<span class="btn-text">Pause</span>';
            pauseBtn.classList.remove('paused');
        }

        function removeTimer(timerId) {
            try {
                const index = timers.findIndex(t => t.id === timerId);
                if (index > -1) {
                    const timer = timers[index];
                    lastRemovedTimer = { ...timer };
                    if (timer.intervalId) {
                        clearInterval(timer.intervalId);
                    }
                    
                    const timerElement = document.getElementById(`timer-${timerId}`);
                    if (timerElement) {
                        // Add the removing class to trigger fade out
                        timerElement.classList.add('removing');
                        // Wait for animation to complete before removing
                        setTimeout(() => {
                            timerElement.remove();
                            timers.splice(index, 1);
                            updateTimerCounter();
                            showUndoButton();
                        }, 300); // Match animation duration
                    }
                }
            } catch (error) {
                console.error('Error removing timer:', error);
                alert('An error occurred while removing the timer');
            }
        }

        function undoRemove() {
            if (lastRemovedTimer) {
                const timer = { ...lastRemovedTimer, intervalId: null };
                timers.push(timer);

                const timerDiv = document.createElement('div');
                timerDiv.className = 'timer';
                timerDiv.id = `timer-${timer.id}`;
                timerDiv.setAttribute('tabindex', '0');
                timerDiv.setAttribute('aria-label', `Timer for ${timer.moduleCode}`);
                timerDiv.innerHTML = `
                    <div class="screw top-left"></div>
                    <div class="screw top-right"></div>
                    <div class="screw bottom-left"></div>
                    <div class="screw bottom-right"></div>
                    <h2>${timer.moduleCode}</h2>
                    <div class="time-display">
                        ${formatTime(timer.remainingTime)}
                    </div>
                    <div class="timer-controls">
                        <button class="timer-btn pause-btn" onclick="pauseTimer(${timer.id})">
                            <span class="btn-text">${timer.isPaused ? 'Resume' : 'Pause'}</span>
                        </button>
                        <button class="timer-btn reset-btn" onclick="resetTimer(${timer.id})">
                            <span class="btn-text">Reset</span>
                        </button>
                        <button class="timer-btn add-time-btn" onclick="addExtraTime(${timer.id}, 60)">
                            +1m
                        </button>
                        <button class="timer-btn add-time-btn" onclick="addExtraTime(${timer.id}, 300)">
                            +5m
                        </button>
                    </div>
                    <div class="progress-bar" style="width: ${(timer.remainingTime / timer.originalTime) * 100}%"></div>
                    <button class="remove-timer" onclick="removeTimer(${timer.id})">×</button>
                `;
                document.getElementById('timers-container').appendChild(timerDiv);

                if (timer.isPaused) timerDiv.classList.add('paused');
                if (timer.remainingTime === 0) timerDiv.classList.add('finished');

                // Start interval if timers are running and this timer is not paused or finished
                if (isRunning && !timer.isPaused && timer.remainingTime > 0) {
                    timer.intervalId = setInterval(() => {
                        updateTimer(timer);
                    }, 1000);
                }

                updateTimerCounter();
                lastRemovedTimer = null;
                hideUndoButton();
            }
        }

        function showUndoButton() {
            const undoButton = document.getElementById('undo-button');
            undoButton.style.display = 'block';
            // Auto-hide after 15 seconds (was 5 seconds)
            setTimeout(hideUndoButton, 15000);
        }

        function hideUndoButton() {
            const undoButton = document.getElementById('undo-button');
            undoButton.style.display = 'none';
            lastRemovedTimer = null;
        }

        function addExtraTime(timerId, seconds) {
            const timer = timers.find(t => t.id === timerId);
            if (!timer) return;

            timer.remainingTime += seconds;

            const timerElement = document.getElementById(`timer-${timerId}`);
            const timeDisplay = timerElement.querySelector('.time-display');
            const progressBar = timerElement.querySelector('.progress-bar');

            timeDisplay.textContent = formatTime(timer.remainingTime);
            
            const progressPercent = (timer.remainingTime / timer.originalTime) * 100;
            progressBar.style.width = `${progressPercent}%`;

            if (timer.remainingTime > 300) {
                timeDisplay.classList.remove('warning');
                progressBar.style.backgroundColor = 'linear-gradient(to right, #B87333, #D4AF37)';
            }
        }

        function addTimeToAll(seconds) {
            timers.forEach(timer => {
                addExtraTime(timer.id, seconds);
            });
        }

        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const remainingSeconds = seconds % 60;
            return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
            } else {
                document.exitFullscreen();
            }
        }

        function pauseAllTimers() {
            const pauseAllBtn = document.getElementById('pause-all');
            const allPaused = timers.every(timer => timer.isPaused);
            
            timers.forEach(timer => {
                const timerElement = document.getElementById(`timer-${timer.id}`);
                const pauseBtn = timerElement.querySelector('.pause-btn');
                
                if (allPaused) {
                    // Resume all
                    timer.isPaused = false;
                    timerElement.classList.remove('paused');
                    pauseBtn.innerHTML = '<span class="btn-text">Pause</span>';
                } else {
                    // Pause all
                    timer.isPaused = true;
                    timerElement.classList.add('paused');
                    pauseBtn.innerHTML = '<span class="btn-text">Resume</span>';
                }
            });

            pauseAllBtn.textContent = allPaused ? 'PAUSE ALL' : 'RESUME ALL';
            pauseAllBtn.classList.toggle('active', !allPaused);
            updateTimerCounter();
        }

        function resetAllTimers() {
            if (confirm('Are you sure you want to reset all timers?')) {
                timers.forEach(timer => {
                    timer.remainingTime = timer.originalTime;
                    timer.isPaused = false;
                    if (timer.intervalId) {
                        clearInterval(timer.intervalId);
                        timer.intervalId = null;
                    }
                    const timerElement = document.getElementById(`timer-${timer.id}`);
                    const timeDisplay = timerElement.querySelector('.time-display');
                    const progressBar = timerElement.querySelector('.progress-bar');
                    const pauseBtn = timerElement.querySelector('.pause-btn');
                    timeDisplay.textContent = formatTime(timer.remainingTime);
                    progressBar.style.width = '100%';
                    timerElement.classList.remove('paused', 'warning', 'finished');
                    pauseBtn.innerHTML = '<span class="btn-text">Pause</span>';
                    pauseBtn.classList.remove('paused');
                });
                const pauseAllBtn = document.getElementById('pause-all');
                pauseAllBtn.textContent = 'PAUSE ALL';
                pauseAllBtn.classList.remove('active');

                // FIX: Re-enable start button and show setup container
                document.getElementById('start-all').disabled = false;
                document.getElementById('setup-container').style.display = '';
                isRunning = false;
            }
        }

        function notifyTimerComplete(timerId) {
            const timer = timers.find(t => t.id === timerId);
            if (!timer) return;
            // Play the sound
            const audio = document.getElementById('timer-complete-sound');
            audio.play().catch(error => console.log('Error playing sound:', error));

            // Visual notification - solid red background
            const timerElement = document.getElementById(`timer-${timerId}`);
            timerElement.classList.add('finished'); // Add the 'finished' class for styling

            // Desktop notifications
            if (Notification.permission === 'granted') {
                new Notification('Timer Complete', {
                    body: `${timer.moduleCode} exam time has ended`,
                    icon: '/favicon.ico'
                });
            }

            // Update ARIA live region
            document.getElementById('aria-live').textContent = `${timer.moduleCode} timer complete.`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Keep only the notification permission check
            if (Notification.permission !== 'granted' && Notification.permission !== 'denied') {
                Notification.requestPermission();
            }
            document.addEventListener('click', enableAudioPlayback, { once: true });
        });

        function usePreset(minutes) {
            const hours = Math.floor(minutes / 60);
            const remainingMinutes = minutes % 60;
            document.getElementById('hours').value = hours;
            document.getElementById('minutes').value = remainingMinutes;
            
            // Highlight the active preset
            document.querySelectorAll('.preset-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent === `${minutes >= 60 ? minutes/60 : minutes}${minutes >= 60 ? 'h' : 'm'}`) {
                    btn.classList.add('active');
                }
            });
        }

        function showHelp() {
            document.getElementById('help-overlay').classList.remove('hidden');
        }
            
        function hideHelp() {
            document.getElementById('help-overlay').classList.add('hidden');
        }
        
        // Keep the click-outside-to-close functionality
        document.getElementById('help-overlay').addEventListener('click', (e) => {
            if (e.target.id === 'help-overlay') {
                hideHelp();
            }
        });

        function toggleHighContrast() {
            document.body.classList.toggle('high-contrast');
            // Save preference
            localStorage.setItem('highContrast', document.body.classList.contains('high-contrast'));
            
            // Update button appearance
            const btn = document.getElementById('accessibility-btn');
            if (document.body.classList.contains('high-contrast')) {
                btn.style.backgroundColor = '#000000';
                btn.style.borderColor = '#FFFFFF';
                btn.style.color = '#FFFFFF';
            } else {
                btn.style.backgroundColor = 'var(--primary-color)';
                btn.style.borderColor = 'var(--primary-color)';
                btn.style.color = '#D4AF37';
            }
        }

        function toggleLightMode() {
            const isLightMode = document.body.classList.toggle('light-mode');

            if (isLightMode) {
                // Apply Light Mode colors
                document.documentElement.style.setProperty('--primary-color', '#6C3D91'); /* Purple */
                document.documentElement.style.setProperty('--accent-color', '#00889C'); /* Teal */
                document.documentElement.style.setProperty('--neutral-color', '#78848E'); /* Grey */
                document.documentElement.style.setProperty('--background-color', '#FFFFFF'); /* White */
                document.documentElement.style.setProperty('--card-color', '#FFFFFF'); /* White */
                document.documentElement.style.setProperty('--timer-text-color', '#000000'); /* Black for timer text */
            } else {
                // Revert to Dark Mode colors
                document.documentElement.style.setProperty('--primary-color', '#6C3D91'); /* Purple */
                document.documentElement.style.setProperty('--accent-color', '#00889C'); /* Teal */
                document.documentElement.style.setProperty('--neutral-color', '#78848E'); /* Grey */
                document.documentElement.style.setProperty('--background-color', '#2C2C2C'); /* Dark background */
                document.documentElement.style.setProperty('--card-color', '#373737'); /* Slightly lighter for cards */
                document.documentElement.style.setProperty('--timer-text-color', '#FFF'); /* White for timer text */
            }
        }

        function updateDateTime() {
            const now = new Date();
            const formattedDate = now.toLocaleDateString('en-GB', {
                weekday: 'short',
                day: '2-digit',
                month: 'short',
                year: 'numeric'
            });
            const formattedTime = now.toLocaleTimeString('en-GB', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            document.getElementById('date-time-display').textContent = `${formattedDate} ${formattedTime}`;
        }

        document.addEventListener('DOMContentLoaded', updateDateTime);
        setInterval(updateDateTime, 1000);

        document.addEventListener('keydown', function(e) {
            // Example: Space or Enter on focused timer card triggers pause/resume
            const active = document.activeElement;
            if (active && active.classList.contains('timer')) {
                const timerId = parseInt(active.id.replace('timer-', ''));
                if ((e.key === ' ' || e.key === 'Enter') && !isNaN(timerId)) {
                    pauseTimer(timerId);
                    e.preventDefault();
                }
            }
        });
    </script>
</body>
</html>
